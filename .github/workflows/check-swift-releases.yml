name: Check for Swift releases

on:
  schedule:
    - cron: '12 */6 * * *' # At minute 12 past every 6th hour
  workflow_dispatch:

jobs:
  find-missing-releases:
    permissions:
      contents: write # required to get (our) draft releases
    outputs:
      releases: ${{ steps.missing-releases.outputs.missing-releases }}
    runs-on: ubuntu-latest
    steps:
      - name: Find missing releases
        id: missing-releases
        env:
          OUR_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PAGE=1
          function fetch-releases() {
            gh api -X GET 'repos/apple/swift/releases' -f page="${PAGE}" --jq 'map(select(.prerelease == false and .draft == false) | .tag_name)[]'
            return $?
          }

          MISSING_RELEASES='[]'
          echo "::debug::Fetching page ${PAGE} of swift releases..."
          RELEASES_JSON="$(fetch-releases)"
          while [[ -n "${RELEASES_JSON}" ]]; do
            DID_ADD=0
            while IFS= read -r SWIFT_RELEASE; do
              if [[ "${SWIFT_RELEASE}" =~ ^swift-([0-9]+)\.([0-9]+)(\.[0-9]+)?-RELEASE$ ]]; then
                if [[ "${BASH_REMATCH[1]}" -ge 5 ]]; then
                  if [[ "${BASH_REMATCH[1]}" -gt 5 ]] || [[ "${BASH_REMATCH[2]}" -ge 9 ]]; then
                    OUR_RELEASE_TAG="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
                    echo "::debug::Checking for ${OUR_RELEASE_TAG} of ${SWIFT_RELEASE}..."
                    if ! gh release view --repo "${OUR_REPO}" "${OUR_RELEASE_TAG}" > /dev/null 2&>1; then
                      RELEASE_JSON="$(jq -cn --arg TAG "${OUR_RELEASE_TAG}" --arg SWIFT "${SWIFT_RELEASE}" '{"version": $TAG, "swift": $SWIFT}')"
                      MISSING_RELEASES="$(jq -cn --arg ELEMENT "${RELEASE_JSON}" --argjson RELEASES "${MISSING_RELEASES}" '$RELEASES + [$ELEMENT]')"
                      DID_ADD=1
                    else
                      echo "::debug::${OUR_RELEASE_TAG} of ${SWIFT_RELEASE} already exists."
                    fi
                  else
                    echo "::debug::Skipping ${SWIFT_RELEASE} because it is older than Swift 5.9."
                  fi
                else
                  echo "::debug::Skipping ${SWIFT_RELEASE} because it is older than Swift 5."
                fi
              else
                echo "::notice::Skipping ${SWIFT_RELEASE} because it does not match the expected format!"
              fi
            done <<< "${RELEASES_JSON}"
            if [[ "${DID_ADD}" -eq 0 ]]; then
              echo "::debug::No releases were added - stopping pagination."
              break
            fi
            ((PAGE++))
            echo "::debug::Fetching page ${PAGE} of swift releases..."
            RELEASES_JSON="$(fetch-releases)"
          done
          echo "missing-releases=${MISSING_RELEASES}" >> "${GITHUB_OUTPUT}"

  create-missing-releases:
    needs: find-missing-releases
    if: ${{ needs.find-missing-releases.outputs.releases != '[]' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release: ${{ fromJson(needs.find-missing-releases.outputs.releases) }}
    steps:
      - name: Create Repo Release
        env:
          REPO: ${{ github.repository }}
          REPO_VERSION: ${{ fromJson(matrix.release).version }}
          SWIFT_RELEASE: ${{ fromJson(matrix.release).swift }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${REPO_VERSION}" \
            --repo "${REPO}" \
            --draft \
            --title "SDKs for ${SWIFT_RELEASE}"\
            --notes "This release contains the cross compilation SDKs for ${SWIFT_RELEASE}."
