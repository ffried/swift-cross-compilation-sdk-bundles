name: Add SDK assets to release

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      release:
        description: The release (tag name) to add the SDK assets to
        required: true

jobs:
  context:
    permissions: {}
    runs-on: ubuntu-latest
    outputs:
      release-name: ${{ steps.release.outputs.tag }}
      swift-version: ${{ steps.release.outputs.tag }}
    steps:
      - name: Determine Release
        id: release
        env:
          TRIGGER: ${{ github.event_name }}
          RELEASE_INPUT: ${{ github.event.inputs.release }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          if [ "${TRIGGER}" = 'workflow_dispatch' ]; then
            echo "tag=${RELEASE_INPUT}" >> "${GITHUB_OUTPUT}"
          else
            echo "tag=${REF_NAME}" >> "${GITHUB_OUTPUT}"
          fi

  build-sdk:
    needs: context
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        host-os:
          - 'macos-13'
        host-arch:
          - 'x86_64'
          - 'arm64'
        target-os:
          - 'ubuntu-22.04'
        target-arch:
          - 'x86_64'
          - 'arm64'
    runs-on: ${{ matrix.host-os }}
    steps:
      - name: OS Details
        id: os-details
        env:
          HOST_OS_AND_VERSION: ${{ matrix.host-os }}
          TARGET_OS_AND_VERSION: ${{ matrix.target-os }}
        run: |
          HOST_OS="$(echo "${HOST_OS_AND_VERSION}" | cut -d'-' -f1)"
          HOST_OS_VERSION="$(echo "${HOST_OS_AND_VERSION}" | cut -d'-' -f2)"
          TARGET_OS="$(echo "${TARGET_OS_AND_VERSION}" | cut -d'-' -f1)"
          TARGET_OS_VERSION="$(echo "${TARGET_OS_AND_VERSION}" | cut -d'-' -f2)"
          echo "host-os=${HOST_OS}" >> "${GITHUB_OUTPUT}"
          echo "host-os-version=${HOST_OS_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "target-os=${TARGET_OS}" >> "${GITHUB_OUTPUT}"
          echo "target-os-version=${TARGET_OS_VERSION}" >> "${GITHUB_OUTPUT}"
      - uses: ffried/swift-cross-compilation-sdk-bundles/actions/bundle-name@main
        id: bundle-names
        with:
          swift-version: ${{ needs.context.outputs.swift-version }}
          host-os: ${{ steps.os-details.outputs.host-os }}
          host-os-version: ${{ steps.os-details.outputs.host-os-version }}
          host-arch: ${{ matrix.host-arch }}
          target-os: ${{ steps.os-details.outputs.target-os }}
          target-os-version: ${{ steps.os-details.outputs.target-os-version }}
          target-arch: ${{ matrix.target-arch }}
      - name: Check for existing asset
        id: existing-asset
        env:
          REPO: ${{ github.repository }}
          RELEASE_NAME: ${{ needs.context.outputs.release-name }}
          ASSET_NAME: ${{ steps.bundle-names.outputs.full-name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FOUND="$(gh release view --repo "${REPO}" "${RELEASE_NAME}" --json assets --jq ".assets | map(.label) | contains([\"${ASSET_NAME}\"])")"
          echo "found=${FOUND}" >> "${GITHUB_OUTPUT}"
      - uses: ffried/swift-cross-compilation-sdk-bundles/actions/generate-cross-compilation-sdk@main
        if: ${{ steps.existing-asset.outputs.found != 'true' }}
        id: generate-sdk
        with:
          swift-version: ${{ needs.context.outputs.swift-version }}
          host-os: ${{ steps.os-details.outputs.host-os }}
          host-os-version: ${{ steps.os-details.outputs.host-os-version }}
          host-arch: ${{ matrix.host-arch }}
          target-os: ${{ steps.os-details.outputs.target-os }}
          target-os-version: ${{ steps.os-details.outputs.target-os-version }}
          target-arch: ${{ matrix.target-arch }}
      - name: Upload asset
        if: ${{ steps.existing-asset.outputs.found != 'true' }}
        env:
          REPO: ${{ github.repository }}
          RELEASE_NAME: ${{ needs.context.outputs.release-name }}
          ASSET_PATH: ${{ steps.generate-sdk.outputs.bundle-package-path }}
          ASSET_NAME: ${{ steps.bundle-names.outputs.full-name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload --repo "${REPO}" --clobber "${RELEASE_NAME}" "${ASSET_PATH}#${ASSET_NAME}"
