name: Generate cross-compilation SDK
description: Generates a cross-compilation SDK with the given inputs.

inputs:
  swift-version:
    description: 'Swift version'
    required: true
  host-os:
    description: 'Host OS - cannot be changed currently'
    required: true
    default: 'macos'
  host-os-version:
    description: 'Host OS version - cannot be changed currently'
    required: true
    default: '13'
  host-arch:
    description: 'Host architecture'
    required: true
  target-arch:
    description: 'Target architecture'
    required: true
  target-os:
    description: 'Target OS'
    required: true
    default: 'ubuntu'
  target-os-version:
    description: 'Target OS version'
    required: true
    default: '22.04'

outputs:
  bundle-path:
    description: 'Bundle path'
    value: ${{ steps.generate-sdk.outputs.bundle-path }}
  bundle-package-path:
    description: 'Bundle package path'
    value: ${{ steps.compress-sdk.outputs.bundle-package-path }}
  bundle-package-checksum-path:
    description: 'Bundle package checksum path'
    value: ${{ steps.compress-sdk.outputs.bundle-package-checksum-path }}

runs:
  using: composite
  steps:
    - uses: ffried/swift-cross-compilation-sdk-bundles/actions/bundle-name@main
      id: bundle-names
      with:
        swift-version: ${{ inputs.swift-version }}
        host-os: ${{ inputs.host-os }}
        host-os-version: ${{ inputs.host-os-version }}
        host-arch: ${{ inputs.host-arch }}
        target-arch: ${{ inputs.target-arch }}
        target-os: ${{ inputs.target-os }}
        target-os-version: ${{ inputs.target-os-version }}
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '^15.0'
    - uses: sersoft-gmbh/os-version-action@v3
      id: os-version
    - name: Install Dependencies
      shell: bash
      env:
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: '1'
        RUNNER_OS: ${{ runner.os }}
        RUNNER_OS_VERSION: ${{ steps.os-version.outputs.version }}
      run: |
        LINK_FLAG=''
        if [ "${RUNNER_OS}" = 'macOS' ] && [ "${RUNNER_OS_VERSION}" = '13' ]; then
            LINK_FLAG='--overwrite'
        fi
        brew install ${LINK_FLAG} cmake colima docker ninja
    - name: Start Colima
      shell: bash
      run: colima start
    - uses: sersoft-gmbh/swift-version-action@v3
      id: swift-version
    - uses: actions/checkout@v4
      with:
        repository: apple/swift-sdk-generator
        persist-credentials: false
    - uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-swift-${{ steps.swift-version.outputs.version }}-swift-sdk-generator-dependencies-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.os-version.outputs.version }}-swift-${{ steps.swift-version.outputs.version }}-swift-sdk-generator-dependencies-
    - uses: actions/cache@v4
      with:
        path: Artifacts
        key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-swift-${{ steps.swift-version.outputs.version }}-swift-sdk-generator-artifacts-${{ steps.bundle-names.outputs.base-name }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.os-version.outputs.version }}-swift-${{ steps.swift-version.outputs.version }}-swift-sdk-generator-artifacts-${{ steps.bundle-names.outputs.base-name }}
    - name: Generate SDK
      id: generate-sdk
      shell: bash
      env:
        SWIFT_VERSION: ${{ inputs.swift-version }}
        HOST_OS: ${{ inputs.host-os }}
        HOST_OS_VERSION: ${{ inputs.host-os-version }}
        HOST_ARCH: ${{ inputs.host-arch }}
        TARGET_OS: ${{ inputs.target-os }}
        TARGET_OS_VERSION: ${{ inputs.target-os-version }}
        TARGET_ARCH: ${{ inputs.target-arch }}
        BUNDLE_NAME: ${{ steps.bundle-names.outputs.base-name }}
        BUNDLE_FULL_NAME: ${{ steps.bundle-names.outputs.full-name }}
      run: |
        TARGET_SYSTEM='linux'
        if [ "${TARGET_OS}" = 'macos' ]; then
            TARGET_SYSTEM='macos'
        fi
        swift run -c release \
            swift-sdk-generator \
              make-linux-sdk \
              --with-docker \
              --sdk-name "${BUNDLE_NAME}" \
              --swift-version "${SWIFT_VERSION}-RELEASE" \
              --host "${HOST_OS}-${HOST_ARCH}" \
              --target "${TARGET_SYSTEM}-${TARGET_ARCH}" \
              --linux-distribution-name "${TARGET_OS}" \
              --linux-distribution-version "${TARGET_OS_VERSION}"
        echo "bundle-path=$(pwd)/Bundles/${BUNDLE_FULL_NAME}" >> "${GITHUB_OUTPUT}"
    - name: Compress SDK
      id: compress-sdk
      shell: bash
      env:
        BUNDLE_NAME: ${{ steps.bundle-names.outputs.full-name }}
        BUNDLE_PATH: ${{ steps.generate-sdk.outputs.bundle-path }}
      run: |
        PACKAGE_NAME="${BUNDLE_NAME}.zip"
        PACKAGE_PATH="$(pwd)/${PACKAGE_NAME}"
        CHECKSUM_PATH="$(pwd)/${BUNDLE_NAME}.checksum"
        pushd "$(dirname "${BUNDLE_PATH}")" > /dev/null
        zip -9 -yr "${PACKAGE_PATH}" "${BUNDLE_NAME}" -x '*.DS_Store'
        popd > /dev/null
        swift package compute-checksum "${PACKAGE_PATH}" > "${CHECKSUM_PATH}"
        echo "bundle-package-path=${PACKAGE_PATH}" >> "${GITHUB_OUTPUT}"
        echo "bundle-package-checksum-path=${CHECKSUM_PATH}" >> "${GITHUB_OUTPUT}"
